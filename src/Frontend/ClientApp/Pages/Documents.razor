@page "/documents"
@using Microsoft.FluentUI.AspNetCore.Components
@using Color = MudBlazor.Color
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation
@* @attribute [Authorize] *@


<PageTitle>Documents</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5">Uploading knowlage to memory</MudText>
                <MudText> </MudText>
                <MudText>Status: @_indexCreationInfo.LastIndexStatus.ToString()</MudText>
                <MudText>Step information: @_indexCreationInfo.StepInfo</MudText>
                <MudText>Progress: @_indexCreationInfo.Value / @_indexCreationInfo.Max</MudText>
                <MudText> </MudText>
                <MudText>Last Index Error Message: @_indexCreationInfo.LastIndexErrorMessage</MudText>

                    <MudProgressLinear Size="Size.Medium" Color="Color.Primary" Buffer="true" Value="@_indexCreationInfo.Value" BufferValue="@_indexCreationInfo.ValueBuffer" Max="@_indexCreationInfo.Max" Class="my-7" />
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem id="uploads" xs="12" Class="overflow-x-auto">
            <MudCard>
                <MudForm @ref="@_form">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">Upload Documents</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Class="pb-4">
                            Select up to ten PDF documents to upload, or explore the existing documents that have already been processed.
                            Each file cannot exceed a file size of @(MaxIndividualFileSize.ToHumanReadableSize())
                        </MudText>
                        <div style="display:flex; align-items:center">
                            <FluentTextField Label="Api Token:" @bind-Value="@ApiToken" TextFieldType="TextFieldType.Password">
                                <FluentIcon Value="@(new Icons.Regular.Size24.Key())" Slot="end" />
                            </FluentTextField>
                        </div>

                        <MudFileUpload @ref="_fileUpload" T="IReadOnlyList<IBrowserFile>"
                                       Accept=".json" MaximumFileCount="10" FilesChanged=@(files => StateHasChanged())
                                       Required="true" RequiredError="You must select at least one PDF file to upload.">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           IconColor="Color.Info"
                                           Variant="Variant.Filled"
                                           StartIcon="@(new Icons.Regular.Size24.DocumentAdd().Content)"
                                           Size="Size.Large"
                                           for="@context">
                                    Select swagger documents
                                </MudButton>

                            </ButtonTemplate>
                            <SelectedTemplate>


                                <MudExpansionPanels Class="pt-4" Elevation=2>
                                    @{
                                    var enabled = context is { Count: > 0 };
                                    var size = enabled ? context.Sum(f => f.Size) : 0;
                                }
                                <MudExpansionPanel Disabled="@(enabled is false)">
                                    <TitleContent>
                                        <div class="d-flex">
                                            <MudIcon Icon="@(new Icons.Regular.Size20.Info().Content)" Class="mr-3" Size="Size.Medium"></MudIcon>
                                            @if (enabled)
                                            {
                                                <MudText>
                                                    Selected @(context.Count) file(s): <MudChip Size="Size.Small">@(size.ToHumanReadableSize())</MudChip>
                                                </MudText>
                                            }
                                            else
                                            {
                                                <MudText>No swagger file selected.</MudText>
                                            }
                                        </div>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudList>
                                            @foreach (var file in context ?? new List<IBrowserFile>())
                                            {
                                                <MudListItem IconColor="Color.Error" @key="@file"
                                                             Icon="media/swagger-svgrepo-com.svg">
                                                    @file.Name <MudChip Size="Size.Small">@file.Size.ToHumanReadableSize()</MudChip>
                                                    </MudListItem>
                                            }
                                        </MudList>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        </SelectedTemplate>
                    </MudFileUpload>
                </MudCardContent>
                <MudCardActions>
                    <MudButton StartIcon="@(new Icons.Regular.Size24.Delete().Content)"
                               Variant="Variant.Filled"
                               Color="Color.Error"
                               Disabled=@(!FilesSelected)
                               Size="Size.Large" Class="ml-2 mb-2"
                               OnClick="@(async () => await _fileUpload.ResetAsync())">
                        Clear Selected Documents
                    </MudButton>
                    <MudButton StartIcon="@(new Icons.Regular.Size24.ArrowUpload().Content)"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled=@(!FilesSelected)
                               Size="Size.Large" Class="ml-auto mr-2 mb-2"
                               OnClick="@(async _ => await SubmitFilesForUploadAsync())">
                        Upload File(s)
                    </MudButton>
                </MudCardActions>
            </MudForm>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudTable Items="@_documents" Dense="true" Hover="true" Bordered="true"
                  FixedHeader="true" Filter="OnFilter" Elevation="4">
            <ToolBarContent>
                @if (_isIndexUploading)
                {
                    <MudText Typo="Typo.h5">
                        Synchronizing Index Documents
                    </MudText>
                    <MudProgressCircular Indeterminate="true"
                                         Size="Size.Small" Class="ml-2" />
                }
                else if (_isLoadingDocuments)
                {
                    <MudText Typo="Typo.h5">
                        Loading Documents
                    </MudText>
                    <MudProgressCircular Indeterminate="true"
                                         Size="Size.Small" Class="ml-2" />
                }
                else
                {
                    <MudText Typo="Typo.h5">
                        Existing Documents
                    </MudText>
                }
                <MudSpacer />
                <MudTextField @bind-Value="@_filter" Placeholder="Filter" Adornment="Adornment.Start"
                              AdornmentIcon="@(new Icons.Regular.Size24.DatabaseSearch().Content)" IconSize="Size.Medium"
                              DebounceInterval="500" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh Style="text-align:center">
                    Preview
                </MudTh>
               @*  <MudTh Style="text-align:center">
                    <MudTableSortLabel SortBy="new Func<DocumentResponse, object>(d => d.Status)">
                        Status
                    </MudTableSortLabel>
                </MudTh> *@
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DocumentResponse, object>(d => d.Name)">
                        Name
                    </MudTableSortLabel>
                </MudTh>
                @* <MudTh Style="text-align:center">
                    <MudTableSortLabel SortBy="new Func<DocumentResponse, object>(d => d.UserGroups)">
                        Permission
                    </MudTableSortLabel>
                </MudTh> *@
                <MudTh>Content Type</MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DocumentResponse, object>(d => d.Size)">
                        Size
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<DocumentResponse, object>(d => d.LastModified.GetValueOrDefault())">
                        Last Modified
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Preview" Style="text-align:center">
                    <MudFab Color="Color.Primary" StartIcon="@(new Icons.Regular.Size24.BookOpen().Content)"
                            Size="Size.Small" OnClick="@(() => OnShowDocument(context))" />
                </MudTd>
                @* <MudTd DataLabel="Status" Style="text-align:center">
                    @{
                        switch (context.Status)
                        {
                            case DocumentProcessingStatus.Failed:
                                <MudIcon Color="Color.Error" Icon="@(new Icons.Regular.Size24.DocumentError().Content)" />
                                break;
                            case DocumentProcessingStatus.Succeeded:
                                <MudIcon Color="Color.Success" Icon="@(new Icons.Regular.Size24.Document().Content)" />
                                break;
                            default:
                                <MudIcon Color="Color.Warning" Icon="@(new Icons.Regular.Size24.DocumentQuestionMark().Content)" />
                                break;
                        }
                    }
                </MudTd> *@
                <MudTd DataLabel="Name">
                    <strong>@context.Name</strong>
                </MudTd>
               @*  <MudTd DataLabel="User Groups">
                    @if (string.IsNullOrEmpty(@context.UserGroups))
                    {
                        <MudChip Size="Size.Small">
                            No user Groups
                        </MudChip>
                    }
                    else
                    {
                        <MudChip Size="Size.Small">
                            @context.UserGroups
                        </MudChip>
                    }
                </MudTd> *@
                <MudTd DataLabel="Content Type">
                    <code>@context.ContentType</code>
                </MudTd>
                <MudTd DataLabel="Size">
                    <MudChip Size="Size.Small">
                        @context.Size.ToHumanReadableSize()
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Last Modified">
                    @($"{context.LastModified.GetValueOrDefault():G}")
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudButton HtmlTag="label"
                   Color="Color.Error"
                   Class="ml-auto mr-2 mb-2"
                   Variant="Variant.Filled"
                   StartIcon="@(new Icons.Regular.Size24.Delete().Content)"
                   Size="Size.Large"
                   OnClick="@CleanUpDocuments">
            Cleanup Documents
        </MudButton>
    </MudItem>
    <MudScrollToTop Selector="#uploads"
                    VisibleCssClass="visible absolute"
                    HiddenCssClass="invisible">
        <MudFab Color="Color.Primary" IconSize="Size.Large" StartIcon="@(new Icons.Regular.Size24.ArrowCircleUp().Content)" />
    </MudScrollToTop>
</MudGrid>